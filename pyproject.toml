[build-system]
# Defined by PEP 518
requires = [
    "setuptools>=64",
    "setuptools-scm[toml]>=8",
]
# Defined by PEP 517
build-backend = "setuptools.build_meta"

[project]
authors = [
    {name = "Bill Little", email = "bjlittle.pub@gmail.com"}
]
classifiers = [
    "Development Status :: 1 - Planning",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
]
description = "Structured Local Area Model"
dynamic = [
    "dependencies",
    "optional-dependencies",
    "readme",
    "version",
]
keywords = [
    "curvilinear",
    "earth-science",
    "geovista",
    "grid",
    "lam",
    "mesh",
    "python",
    "pyvista",
    "rectilinear",
    "ugrid",
    "unstructured",
    "vtk",
]
license = {text = "BSD-3-Clause"}
name = "geovista-slam"
requires-python = ">=3.11"

[project.urls]
Code = "https://github.com/bjlittle/geovista-slam"
Issues = "https://github.com/bjlittle/geovista-slam/issues"

[tool.check-manifest]
ignore = [
    "src/slam/_version.py",
]

[tool.codespell]
skip = "CODE_OF_CONDUCT.md"

[tool.pytest.ini_options]
addopts = [
    "--doctest-continue-on-failure",
    "--doctest-modules",
    "--import-mode=importlib",
    "-ra",
    "--strict-config",
    "--strict-markers",
    "-v",
]
doctest_optionflags = "NORMALIZE_WHITESPACE ELLIPSIS NUMBER"
filterwarnings = [
    "error",
]
log_cli = "True"
log_cli_level = "INFO"
minversion = "6.0"
testpaths = "tests"
xfail_strict = "True"

[tool.repo-review]
ignore = [
    # https://learn.scientific-python.org/development/guides/packaging-simple#PY004
    "PY004",  # Has docs folder
    # https://learn.scientific-python.org/development/guides/packaging-simple#PY005
    "PY005",  #  Has tests folder
    # https://learn.scientific-python.org/development/guides/tasks#PY007
    "PY007",  # Supports an easy task runner (nox or tox)
    # https://learn.scientific-python.org/development/guides/style#PC140
    "PC140",  # Uses mypy
    # https://learn.scientific-python.org/development/guides/style#PC180
    "PC180",  # Uses prettier
    # https://learn.scientific-python.org/development/guides/style#MY100
    "MY100",  # Uses MyPy (pyproject config)
    # https://learn.scientific-python.org/development/guides/docs#RTD100
    "RTD100", # Uses ReadTheDocs (pyproject config)
]

[tool.ruff]
exclude = [
    "scripts",
]
line-length = 88

[tool.ruff.format]
docstring-code-format = true
preview = false

[tool.ruff.lint]
ignore = [
    # NOTE: Non-permanent exclusions should be added to ".ruff.toml".

    # flake8-commas (COM)
    # https://docs.astral.sh/ruff/rules/#flake8-commas-com
    "COM812",  # Trailing comma missing.

    # flake8-fixme (FIX)
    # https://docs.astral.sh/ruff/rules/line-contains-todo/
    "FIX002",  # Line contains TODO, consider resolving the issue.

    # flake8-implicit-str-concat (ISC)
    # https://docs.astral.sh/ruff/rules/single-line-implicit-string-concatenation/
    # NOTE: This rule may cause conflicts when used with "ruff format".
    "ISC001",  # Implicitly concatenate string literals on one line.

    # missing-todo-link (TD003)
    # https://docs.astral.sh/ruff/rules/missing-todo-link/
    "TD003",  # Missing issue link on the line following this TODO.
]
preview = false
select = [
    "ALL",

    # pydocstyle (D)
    # https://docs.astral.sh/ruff/rules/multi-line-summary-first-line/
    "D212",  # Multi-line docstring summary should start at the first line
]

[tool.ruff.lint.isort]
force-sort-within-sections = true
known-first-party = ["slam"]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.mccabe]
max-complexity = 22

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.pylint]
max-args = 6

[tool.setuptools]
license-files = ["LICENSE"]
zip-safe = false

[tool.setuptools.dynamic]
dependencies = { file = ["requirements/pypi-core.txt"] }
readme = {file = "README.md", content-type = "text/markdown"}

[tool.setuptools.dynamic.optional-dependencies]
dev = { file = ["requirements/pypi-dev.txt"] }
test = { file = ["requirements/pypi-test.txt"] }

[tool.setuptools.packages.find]
include = ["slam*"]
where = ["src"]

[tool.setuptools_scm]
write_to = "src/slam/_version.py"
local_scheme = "dirty-tag"
version_scheme = "release-branch-semver"

[tool.pixi.workspace]
channels = ["conda-forge"]
platforms = ["linux-64", "osx-64"]

[tool.pixi.environments]
default = { features = [], solve-group = "default" }
dev = { features = ["dev"], solve-group = "default" }
test = { features = ["test", "dev"], solve-group = "default" }
slam = { features = ["test", "dev"], solve-group = "default" }

py311 = { features = ["py311"], solve-group = "py311" }
dev-py311 = { features = ["dev", "py311"], solve-group = "py311" }
test-py311 = { features = ["test", "dev", "py311"], solve-group = "py311" }
slam-py311 = { features = ["test", "dev", "py311"], solve-group = "py311" }

py312 = { features = ["py312"], solve-group = "py312" }
dev-py312 = { features = ["dev", "py312"], solve-group = "py312" }
test-py312 = { features = ["test", "dev", "py312"], solve-group = "py312" }
slam-py312 = { features = ["test", "dev", "py312"], solve-group = "py312" }

[tool.pixi.dependencies]
geovista = ">=0.5.3,<0.6"
iris = ">=3.12.0,<4"
numpy = ">=1.25.0,<3"
setuptools = ">=79.0.0,<80"
setuptools-scm = ">=8.2.1,<9"

[tool.pixi.feature.dev.dependencies]
pre-commit = ">=4.2.0,<5"
ruff = ">=0.12.0,<0.13"
zizmor = ">=1.9.0,<2"

[tool.pixi.feature.dev.pypi-dependencies]
geovista-slam = { path = ".", editable = true }

[tool.pixi.feature.dev.tasks]
fmt = "ruff format"
lint = "ruff check"

[tool.pixi.feature.test.dependencies]
pytest = ">=8.3.5,<9"

[tool.pixi.feature.py311.dependencies]
python = "3.11.*"
pip = ">=25.0.1,<26"

[tool.pixi.feature.py312.dependencies]
python = "3.12.*"
pip = ">=25.0.1,<26"
